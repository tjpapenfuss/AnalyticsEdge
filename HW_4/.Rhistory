setwd("~/AnalyticsEdge/AnalyticsEdge/HW_4")
library(gdata)
ebay.df <- read.xls("eBayAuctions.xls")
table(ebay.df$Competitive.)
ebay.df$competitive.factor <- as.factor(ebay.df$Competitive.)
head(ebay.df)
str(ebay.train)
str(ebay.df)
ebay.df$category.factor <- as.factor(ebay.df$Category)
ebay.df$currency.factor <- as.factor(ebay.df$currency)
ebay.df$endDay.factor <- as.factor(ebay.df$endDay)
ebay.df$duration.factor <- as.factor(ebay.df$Duration)
ebay.df$competitive.factor <- as.factor(ebay.df$Competitive.)
str(ebay.df)
set.seed(15071)
split = createDataPartition(ebay$category.factor, p = 0.6, list = FALSE)
library(caret)
library(rpart)
library(rpart.plot)
library(caTools)
library(dplyr)
library(randomForest)
library(gdata)
set.seed(15071)
split = createDataPartition(ebay$category.factor, p = 0.6, list = FALSE)
split = createDataPartition(ebay.df$category.factor, p = 0.6, list = FALSE)
ebay.train = ebay.df[split,]
ebay.test = ebay.df[-split,]
head(ebay.train)
ggplot(aes(y=count(category.factor), x=category.factor), data = ebay.train) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(aes(y = stat(count), x=category.factor), data = ebay.train) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(aes(x=category.factor, y = stat(count)), data = ebay.train) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(aes(x=competitive.factor, y = stat(count)), data = ebay.train) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot2(aes(x=category.factor, y = stat(count)), data = ebay.train) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(ggplot2)
ggplot2(aes(x=category.factor, y = stat(count)), data = ebay.train) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(ggplot2)
ggplot2(aes(x=category.factor, y = stat(count)), data = ebay.train) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot2(aes(x=category.factor, y = ..count..), data = ebay.train) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(aes(x=category.factor, y = ..count..), data = ebay.train) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(aes(x=category.factor, y = ..count..), data = ebay.train) +
geom_bar(stat = "bin") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(aes(x=category.factor, y = ..count..), data = ebay.train) +
geom_bar(stat = "count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(aes(x=category.factor, y = ..count..), data = ebay.test) +
geom_bar(stat = "count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(aes(x=category.factor, y = ..count..), data = ebay.df) +
geom_bar(stat = "count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
adaboost <- boosting(competitive.factor~., data = ebay.train)
### (a)
## adaboost
library(adabag)
adaboost <- boosting(competitive.factor~., data = ebay.train)
# variable importance
importanceplot(adaboost, cex.names=0.7)
ebay.df <- read.xls("eBayAuctions.xls")
ebay.df$category.factor <- as.factor(ebay.df$Category)
ebay.df$currency.factor <- as.factor(ebay.df$currency)
ebay.df$endDay.factor <- as.factor(ebay.df$endDay)
ebay.df$duration.factor <- as.factor(ebay.df$Duration)
ebay.df$Competitive. <- as.factor(ebay.df$Competitive.)
str(ebay.df)
set.seed(15071)
split = createDataPartition(ebay.df$category.factor, p = 0.6, list = FALSE)
ebay.train = ebay.df[split,]
ebay.test = ebay.df[-split,]
head(ebay.train)
adaboost <- boosting(Competitive.~., data = ebay.train)
# Testing to make sure I have an appropriate distro.
ggplot(aes(x=category.factor, y = ..count..), data = ebay.train) +
geom_bar(stat = "count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ebay.df <- read.xls("eBayAuctions.xls")
table(ebay.df$Competitive.)
ebay.df$category.factor <- as.factor(ebay.df$Category)
ebay.df$currency.factor <- as.factor(ebay.df$currency)
ebay.df$endDay.factor <- as.factor(ebay.df$endDay)
ebay.df$duration.factor <- as.factor(ebay.df$Duration)
ebay.df$Competitive. <- as.factor(ebay.df$Competitive.)
str(ebay.df)
set.seed(15071)
split = createDataPartition(ebay.df$category.factor, p = 0.6, list = FALSE)
ebay.train = ebay.df[split,]
ebay.test = ebay.df[-split,]
head(ebay.train)
### (a)
## adaboost
library(adabag)
adaboost <- boosting(Competitive.~., data = ebay.train)
adaboost <- boosting(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice+OpenPrice, data = ebay.train)
# variable importance
importanceplot(adaboost, cex.names=0.7)
pred_train <- predict(adaboost, newdata=ebay.train, type="class")
confusion.matrix = table(ebay.train$Competitive., pred_train)
pred_train
$confusion
pred_train$confusion
# validation
pred_test <- predict(adaboost, newdata=ebay.test, type="class")
pred_test$confusion
# confusion.matrix = table(ebay.train$Competitive., pred_train)
# confusion.matrix
TPR <- pred_test$confusion[2,2]/sum(pred_test$confusion[2,])
TPR
#confusion.matrix = table(ebay.train$Competitive., pred_train)
#confusion.matrix
TPR <- pred_train$confusion[2,2]/sum(pred_train$confusion[2,])
TPR
FPR <- pred_train$confusion[1,2]/sum(pred_train$confusion[1,])
FPR
# training
pred_train <- predict(adaboost, newdata=ebay.train, type="Competitive.")
pred_train
pred_train$confusion
FPR
# validation
pred_test <- predict(adaboost, newdata=ebay.test, type="class")
pred_test
pred_train
1-pred_train$error
pred_test$confusion
1-pred_test$error
## xgboost
library(xgboost)
xgb <- xgboost(data = model.matrix(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice+OpenPrice .-1,
xgb <- xgboost(data = model.matrix(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice+OpenPrice,
subset(train.df, select=-c(competitive.factor, Competitive.))), label = train.df$Competitive., max.depth = 20, eta = 1, nthread = 2, nrounds = 50, objective = "binary:logistic", verbose = 0)
xgb <- xgboost(data = model.matrix(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice+OpenPrice,
subset(ebay.train, select=-c(competitive.factor, Competitive.))), label = ebay.train$Competitive., max.depth = 20, eta = 1, nthread = 2, nrounds = 50, objective = "binary:logistic", verbose = 0)
ebay.df <- read.xls("eBayAuctions.xls")
table(ebay.df$Competitive.)
ebay.df$category.factor <- as.factor(ebay.df$Category)
ebay.df$currency.factor <- as.factor(ebay.df$currency)
ebay.df$endDay.factor <- as.factor(ebay.df$endDay)
ebay.df$duration.factor <- as.factor(ebay.df$Duration)
ebay.df$competitive.factor <- as.factor(ebay.df$Competitive.)
str(ebay.df)
set.seed(15071)
split = createDataPartition(ebay.df$category.factor, p = 0.6, list = FALSE)
ebay.train = ebay.df[split,]
ebay.test = ebay.df[-split,]
head(ebay.train)
adaboost <- boosting(competitive.factor~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice+OpenPrice, data = ebay.train)
# training
pred_train <- predict(adaboost, newdata=ebay.train, type="Competitive.")
pred_train
# validation
pred_test <- predict(adaboost, newdata=ebay.test, type="class")
pred_test
pred_test$confusion
1-pred_test$error
xgb <- xgboost(data = model.matrix(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice+OpenPrice,
subset(ebay.train, select=-c(competitive.factor, Competitive.))), label = ebay.train$Competitive., max.depth = 20, eta = 1, nthread = 2, nrounds = 50, objective = "binary:logistic", verbose = 0)
str(ebay.df)
str(ebay.train)
xgb <- xgboost(data = model.matrix(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice+OpenPrice,
subset(ebay.train, select=-c(competitive.factor, Competitive.))), label = ebay.train$Competitive., max.depth = 20, eta = 1, nthread = 2, nrounds = 50, objective = "binary:logistic", verbose = 0)
xgb <- xgboost(data = model.matrix(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice+OpenPrice,
subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.))), label = ebay.train$Competitive., max.depth = 20, eta = 1, nthread = 2, nrounds = 50, objective = "binary:logistic", verbose = 0)
# variable importance
xgb.importance(colnames(model.matrix(~ .-1, subset(ebay.train, select=-c(competitive.factor, Competitive.)))), model = xgb)
xgb <- xgboost(data = model.matrix(competitive.factor~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice+OpenPrice,
subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.))), label = ebay.train$Competitive., max.depth = 20, eta = 1, nthread = 2, nrounds = 50, objective = "binary:logistic", verbose = 0)
# variable importance
xgb.importance(colnames(model.matrix(Competitive.~ .-1, subset(ebay.train, select=-c(competitive.factor, Competitive.)))), model = xgb)
xgb <- xgboost(data = model.matrix(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice+OpenPrice,
subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.))), label = ebay.train$Competitive., max.depth = 20, eta = 1, nthread = 2, nrounds = 50, objective = "binary:logistic", verbose = 0)
# variable importance
xgb.importance(colnames(model.matrix(Competitive.~ .-1, subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.)))), model = xgb)
xgb <- xgboost(data = model.matrix(Competitive.~ .-1,
subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.))), label = ebay.train$Competitive., max.depth = 20, eta = 1, nthread = 2, nrounds = 50, objective = "binary:logistic", verbose = 0)
# variable importance
xgb.importance(colnames(model.matrix(Competitive.~ .-1, subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.)))), model = xgb)
adaboost <- boosting(Competitive.~s.-1, data = ebay.train)
adaboost <- boosting(Competitive.~ .-1, data = ebay.train)
# training
confusionMatrix(factor(1*(predict(xgb, model.matrix(~ .-1, subset(ebay.train, select=-c(competitive.factor, Competitive.))))>sum(ebay.df$Competitive.==1)/nrow(ebay.df))), ebay.train$competitive.factor)
# training
confusionMatrix(factor(1*(predict(xgb, model.matrix(Competitive.~ .-1, subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.))))>sum(ebay.df$Competitive.==1)/nrow(ebay.df))), ebay.train$competitive.factor)
# validation
confusionMatrix(factor(1*(predict(xgb, model.matrix(Competitive.~ .-1, subset(valid.df, select=-c(competitive.factor, ebay.train$Competitive.))))>sum(ebay.df$Competitive.==1)/nrow(ebay.df))), valid.df$competitive.factor)
# validation
confusionMatrix(factor(1*(predict(xgb, model.matrix(Competitive.~ .-1, subset(ebay.test, select=-c(competitive.factor, ebay.train$Competitive.))))>sum(ebay.df$Competitive.==1)/nrow(ebay.df))), valid.df$competitive.factor)
# validation
confusionMatrix(factor(1*(predict(xgb, model.matrix(Competitive.~ .-1, subset(ebay.test, select=-c(competitive.factor, ebay.train$Competitive.))))>sum(ebay.df$Competitive.==1)/nrow(ebay.df))), ebay.test$competitive.factor)
# variable importance
xgb.importance(colnames(model.matrix(Competitive.~ .-1, subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.)))), model = xgb)
## bagging
bag <- bagging(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice+OpenPrice, data = ebay.train)
## bagging
bag <- bagging(competitive.factor~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice+OpenPrice, data = ebay.train)
# variable importance
importanceplot(bag, cex.names=0.7)
# training
# confusionMatrix(, )
pred_train <- predict(bag, newdata=ebay.train, type="class")
pred_train
# validation
# confusionMatrix(, )
pred_test <- predict(bag, newdata=ebay.test, type="class")
pred_test
1-pred_test$error
1-pred_train$error
rf <- randomForest(competitive.factor~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice+OpenPrice, data = ebay.train, method = "class")
# variable importance
varImp(rf, conditional=TRUE)
#TRAINING
pred_train <- predict(rf, newdata=ebay.train, type="class")
pred_train
pred_train$confusion
# validation
# confusionMatrix(, )
pred_test <- predict(bag, newdata=ebay.test, type="class")
pred_test
# validation
# confusionMatrix(, )
pred_test <- predict(rf, newdata=ebay.test, type="class")
pred_test
summary(pred_test)
# validation
confusionMatrix(ebay.test$competitive.factor, pred_test)
confusionMatrix(ebay.train$competitive.factor, pred_train)
confusionMatrix(ebay.test$competitive.factor, pred_test)
# variable importance
varImp(rf, conditional=TRUE)
rf_pred_train <- predict(rf, newdata=ebay.train, type="class")
confusionMatrix(ebay.train$competitive.factor, rf_pred_train)
# validation
rf_pred_test <- predict(rf, newdata=ebay.test, type="class")
confusionMatrix(ebay.test$competitive.factor, rf_pred_test)
## adaboost
adaboost <- boosting(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+OpenPrice, data = ebay.train)
## adaboost
adaboost <- boosting(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice+OpenPrice, data = ebay.train)
## adaboost
adaboost <- boosting(competitive.factor~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+OpenPrice, data = ebay.train)
# variable importance
importanceplot(adaboost, cex.names=0.7)
# training
ada_pred_train <- predict(adaboost, newdata=ebay.train, type="Competitive.")
ada_pred_train$confusion
1-ada_pred_train$error
# validation
ada_pred_test <- predict(adaboost, newdata=ebay.test, type="class")
ada_pred_test$confusion
1-ada_pred_test$error
## xgboost
xgb <- xgboost(data = model.matrix(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+OpenPrice,
subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.))), label = ebay.train$Competitive., max.depth = 20, eta = 1, nthread = 2, nrounds = 50, objective = "binary:logistic", verbose = 0)
# variable importance
xgb.importance(colnames(model.matrix(Competitive.~ .-1, subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.)))), model = xgb)
# variable importance
xgb.importance(colnames(model.matrix(Competitive.~ sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+OpenPrice, subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.)))), model = xgb)
# training
confusionMatrix(factor(1*(predict(xgb, model.matrix(Competitive.~ .-1, subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.))))>sum(ebay.df$Competitive.==1)/nrow(ebay.df))), ebay.train$competitive.factor)
# validation
confusionMatrix(factor(1*(predict(xgb, model.matrix(Competitive.~ .-1, subset(ebay.test, select=-c(competitive.factor, ebay.train$Competitive.))))>sum(ebay.df$Competitive.==1)/nrow(ebay.df))), ebay.test$competitive.factor)
# training
confusionMatrix(factor(1*(predict(xgb, model.matrix(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+OpenPrice, subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.))))>sum(ebay.df$Competitive.==1)/nrow(ebay.df))), ebay.train$competitive.factor)
# validation
confusionMatrix(factor(1*(predict(xgb, model.matrix(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+OpenPrice, subset(ebay.test, select=-c(competitive.factor, ebay.train$Competitive.))))>sum(ebay.df$Competitive.==1)/nrow(ebay.df))), ebay.test$competitive.factor)
## bagging
bag <- bagging(competitive.factor~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+OpenPrice, data = ebay.train)
# variable importance
importanceplot(bag, cex.names=0.7)
# variable importance
importanceplot(bag, cex.names=0.7)
# training
bag_pred_train <- predict(bag, newdata=ebay.train, type="class")
1-bag_pred_train$error
# validation
bag_pred_test <- predict(bag, newdata=ebay.test, type="class")
1-bag_pred_test$error
## random forest
rf <- randomForest(competitive.factor~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+OpenPrice, data = ebay.train, method = "class")
# variable importance
varImp(rf, conditional=TRUE)
#TRAINING
rf_pred_train <- predict(rf, newdata=ebay.train, type="class")
confusionMatrix(ebay.train$competitive.factor, rf_pred_train)
# validation
rf_pred_test <- predict(rf, newdata=ebay.test, type="class")
confusionMatrix(ebay.test$competitive.factor, rf_pred_test)
### (c)
## adaboost
adaboost <- boosting(competitive.factor~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice, data = ebay.train)
# variable importance
importanceplot(adaboost, cex.names=0.7)
# training
ada_pred_train <- predict(adaboost, newdata=ebay.train, type="Competitive.")
ada_pred_train$confusion
1-ada_pred_train$error
# validation
ada_pred_test <- predict(adaboost, newdata=ebay.test, type="class")
ada_pred_test$confusion
1-ada_pred_test$error
## xgboost
xgb <- xgboost(data = model.matrix(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice,
subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.))), label = ebay.train$Competitive., max.depth = 20, eta = 1, nthread = 2, nrounds = 50, objective = "binary:logistic", verbose = 0)
# variable importance
xgb.importance(colnames(model.matrix(Competitive.~ sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice, subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.)))), model = xgb)
# training
confusionMatrix(factor(1*(predict(xgb, model.matrix(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice, subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.))))>sum(ebay.df$Competitive.==1)/nrow(ebay.df))), ebay.train$competitive.factor)
# validation
confusionMatrix(factor(1*(predict(xgb, model.matrix(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice, subset(ebay.test, select=-c(competitive.factor, ebay.train$Competitive.))))>sum(ebay.df$Competitive.==1)/nrow(ebay.df))), ebay.test$competitive.factor)
## bagging
bag <- bagging(competitive.factor~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice, data = ebay.train)
# variable importance
importanceplot(bag, cex.names=0.7)
# training
bag_pred_train <- predict(bag, newdata=ebay.train, type="class")
1-bag_pred_train$error
# validation
bag_pred_test <- predict(bag, newdata=ebay.test, type="class")
1-bag_pred_test$error
## random forest
rf <- randomForest(competitive.factor~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+ClosePrice, data = ebay.train, method = "class")
# variable importance
varImp(rf, conditional=TRUE)
#TRAINING
rf_pred_train <- predict(rf, newdata=ebay.train, type="class")
confusionMatrix(ebay.train$competitive.factor, rf_pred_train)
# validation
rf_pred_test <- predict(rf, newdata=ebay.test, type="class")
confusionMatrix(ebay.test$competitive.factor, rf_pred_test)
## adaboost
adaboost <- boosting(competitive.factor~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor, data = ebay.train)
# variable importance
importanceplot(adaboost, cex.names=0.7)
# training
ada_pred_train <- predict(adaboost, newdata=ebay.train, type="Competitive.")
ada_pred_train$confusion
1-ada_pred_train$error
# validation
ada_pred_test <- predict(adaboost, newdata=ebay.test, type="class")
ada_pred_test$confusion
1-ada_pred_test$error
## xgboost
xgb <- xgboost(data = model.matrix(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor,
subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.))), label = ebay.train$Competitive., max.depth = 20, eta = 1, nthread = 2, nrounds = 50, objective = "binary:logistic", verbose = 0)
# variable importance
xgb.importance(colnames(model.matrix(Competitive.~ sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor, subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.)))), model = xgb)
# training
confusionMatrix(factor(1*(predict(xgb, model.matrix(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor, subset(ebay.train, select=-c(competitive.factor, ebay.train$Competitive.))))>sum(ebay.df$Competitive.==1)/nrow(ebay.df))), ebay.train$competitive.factor)
# validation
confusionMatrix(factor(1*(predict(xgb, model.matrix(Competitive.~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor, subset(ebay.test, select=-c(competitive.factor, ebay.train$Competitive.))))>sum(ebay.df$Competitive.==1)/nrow(ebay.df))), ebay.test$competitive.factor)
## bagging
bag <- bagging(competitive.factor~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+OpenPrice, data = ebay.train)
# variable importance
importanceplot(bag, cex.names=0.7)
## bagging
bag <- bagging(competitive.factor~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor, data = ebay.train)
# variable importance
importanceplot(bag, cex.names=0.7)
# training
bag_pred_train <- predict(bag, newdata=ebay.train, type="class")
1-bag_pred_train$error
# validation
bag_pred_test <- predict(bag, newdata=ebay.test, type="class")
1-bag_pred_test$error
## random forest
rf <- randomForest(competitive.factor~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor+OpenPrice, data = ebay.train, method = "class")
## random forest
rf <- randomForest(competitive.factor~sellerRating+currency.factor+duration.factor+
endDay.factor+category.factor, data = ebay.train, method = "class")
# variable importance
varImp(rf, conditional=TRUE)
#TRAINING
rf_pred_train <- predict(rf, newdata=ebay.train, type="class")
confusionMatrix(ebay.train$competitive.factor, rf_pred_train)
# validation
rf_pred_test <- predict(rf, newdata=ebay.test, type="class")
confusionMatrix(ebay.test$competitive.factor, rf_pred_test)
