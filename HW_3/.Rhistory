setwd("~/OneDrive - Massachusetts Institute of Technology/Analytics Edge/Recitation/Rec5")
library(caret)
library(ROCR)
## First example
churn.df <- read.csv("data/customerchurn.csv")
## First example
churn.df <- read.csv("customerchurn.csv")
set.seed(15.071)
train.index <- sample(1:nrow(churn.df), nrow(churn.df)*0.6)
valid.index <- setdiff(1:nrow(churn.df), train.index)
train.df <- churn.df[train.index, ]
valid.df <- churn.df[valid.index, ]
# Recall that for linear regression, we used the command "lm()", which stood for "linear model"
# Now, we will use "glm()", which stands for "generalized linear models"
?glm
# glm() can be used to create a number of different models, including linear and
# logistic regression, by changing  the "family" parameter.
# For logistic regression, we use family="binominal".
# Our dependent variable is Churn, and we will use all other variables as independent variables,
# remembering that '.' is a shortcut to refer to all available variables:
logRegModel0 = glm(Churn ~., data=train.df, family="binomial")     # Churn is binary
# Let us see what this object is:
summary(logRegModel0)
# We want to remove MonthlyCharges, and all but the one payment method that shows significance (Electronic check)
# To do this, we will create a new variable that returns 1 if the payment method is electronic check, and 0 otherwise
# First the == text will return TRUE or FALSE, and then as.numeric() will convert TRUE to 1 and FALSE to 0
train.df$ElectronicCheck <- as.numeric(train.df$PaymentMethod == "Electronic check")
valid.df$ElectronicCheck <- as.numeric(valid.df$PaymentMethod == "Electronic check")
# We can quickly check that we added one column to both datasets
dim(train.df)
dim(valid.df)
# Now we run our model without the old PaymentMethod variable or MonthlyCharges
logRegModel <- glm(Churn~SeniorCitizen+ElectronicCheck+InternetService+tenure+Contract,
data=train.df, family="binomial")
summary(logRegModel)
# Now that we have constructed our model, we can apply it to the test set.
# We will feed the model, as well as the test set data, into the predict() function as follows:
valid.df$Churn.predict <- predict(logRegModel, newdata=valid.df, type="response")
# Confusion matrix
table(valid.df$Churn, valid.df$Churn.predict > (sum(valid.df$Churn)/nrow(valid.df)))
# As we saw in class, we can take the coefficient of months as a customer (tenure):
coef = logRegModel$coefficients[6]     # coefficient of tenure
# Exponentiate it:
coef
exp(coef)
setwd("~/AnalyticsEdge/AnalyticsEdge/HW_3")
data = read.csv("titanic.csv")
data$Pclass <- factor(data$Pclass)
data$Sex <- factor(data$Sex)
set.seed(123)
split = createDataPartition(data$Survived, p = 0.7, list = FALSE)
titanic.train = data[split,]
titanic.test = data[-split,]
# --------------------------------------------------------------------------------- #
#### Problem 1a
# Run the linear regression. Survived is the dependent var. Pclass, Sex, and SibSp is the independent
model <- glm(Survived ~ Pclass + Sex + SibSp,family=binomial,data=titanic.train)
summary(model)
regressor = lm(formula = Survived ~ Pclass + Sex + SibSp, data = titanic.train)
summary(regressor)
coef = logRegModel$coefficients[1]     # coefficient of tenure
# Exponentiate it:
coef
coef = model$coefficients[1]     # coefficient of tenure
# Exponentiate it:
coef
coef = model$coefficients[2]     # coefficient of tenure
# Exponentiate it:
coef
exp(coef)
coef = model$coefficients[5]     # coefficient of tenure
# Exponentiate it:
coef
exp(coef)
exp(coef*2)
exp(coef)*2
coef = model$coefficients[2]     # coefficient of tenure
# Exponentiate it:
coef
exp(coef)*2
coef = model$coefficients[3]     # coefficient of tenure
# Exponentiate it:
coef
exp(coef)*2
exp(coef)
coef = model$coefficients[2]     # coefficient of tenure
# Exponentiate it:
coef
exp(coef)
valid.df$Churn.predict
exp(0/96)
exp(0.96)
predict(model, newdata = newdata_patient0_updates, type = "response")
body_mass = 20
newdata_patient0_updates = with(data, data.frame(male = factor(1),age = 55,education = "College",currentSmoker=factor(0),
cigsPerDay=0,BPMeds=factor(0),prevalentStroke=factor(0),
prevalentHyp=factor(0),diabetes=factor(0),totChol=180,sysBP=115,
diaBP=100,BMI=body_mass,heartRate=60,glucose=80))
predict(model, newdata = newdata_patient0_updates, type = "response")
newdata_patient0 = with(data, data.frame(male = factor(1),age = 55,education = "College",currentSmoker=factor(1),
cigsPerDay=11,BPMeds=factor(0),prevalentStroke=factor(0),
prevalentHyp=factor(1),diabetes=factor(0),totChol=220,sysBP=140,
diaBP=100,BMI=30,heartRate=60,glucose=80))
# Set your additional factor variables.
predict(model, newdata = newdata_patient0, type = "response")
library(caTools)
data = read.csv("framingham.csv")
# Set CHD as a factor variable. This is the dependent variable (y).
data$TenYearCHD <- factor(data$TenYearCHD)
# Set your additional factor variables.
data$male <- factor(data$male)
data$currentSmoker <- factor(data$currentSmoker)
data$BPMeds <- factor(data$BPMeds)
data$prevalentStroke <- factor(data$prevalentStroke)
data$prevalentHyp <- factor(data$prevalentHyp)
data$diabetes <- factor(data$diabetes)
set.seed(31)
N <- nrow(data)
idx = sample.split(data$TenYearCHD, 0.75)
train <- data[idx,]
test = data[!idx,]
str(train)
# --------------------------------------------------------------------------------- #
#### Problem 2b
# Run the logistic regression.
model <- glm(TenYearCHD ~.,family=binomial, data)
summary(model)
newdata_patient0 = with(data, data.frame(male = factor(1),age = 55,education = "College",currentSmoker=factor(1),
cigsPerDay=11,BPMeds=factor(0),prevalentStroke=factor(0),
prevalentHyp=factor(1),diabetes=factor(0),totChol=220,sysBP=140,
diaBP=100,BMI=30,heartRate=60,glucose=80))
# Set your additional factor variables.
predict(model, newdata = newdata_patient0, type = "response")
body_mass_arr[10]
body_mass_arr = array(1:11)
body_mass = 20
while(body_mass < 30) {
newdata_patient0_updates = with(data, data.frame(male = factor(1),age = 55,education = "College",currentSmoker=factor(0),
cigsPerDay=0,BPMeds=factor(0),prevalentStroke=factor(0),
prevalentHyp=factor(0),diabetes=factor(0),totChol=180,sysBP=115,
diaBP=100,BMI=body_mass,heartRate=60,glucose=80))
# Set your additional factor variables.
body_mass[body_mass-19] = predict(model, newdata = newdata_patient0_updates, type = "response")
}
while(body_mass < 30) {
newdata_patient0_updates = with(data, data.frame(male = factor(1),age = 55,education = "College",currentSmoker=factor(0),
cigsPerDay=0,BPMeds=factor(0),prevalentStroke=factor(0),
prevalentHyp=factor(0),diabetes=factor(0),totChol=180,sysBP=115,
diaBP=100,BMI=body_mass,heartRate=60,glucose=80))
# Set your additional factor variables.
body_mass[body_mass-19] = predict(model, newdata = newdata_patient0_updates, type = "response")
body_mass = body_mass+1
}
print(body_mass)
while(body_mass < 30) {
newdata_patient0_updates = with(data, data.frame(male = factor(1),age = 55,education = "College",currentSmoker=factor(0),
cigsPerDay=0,BPMeds=factor(0),prevalentStroke=factor(0),
prevalentHyp=factor(0),diabetes=factor(0),totChol=180,sysBP=115,
diaBP=100,BMI=body_mass,heartRate=60,glucose=80))
# Set your additional factor variables.
body_mass[body_mass-19] = predict(model, newdata = newdata_patient0_updates, type = "response")
body_mass = body_mass+1
print(body_mass)
}
body_mass = 20
newdata_patient0_updates = with(data, data.frame(male = factor(1),age = 55,education = "College",currentSmoker=factor(0),
cigsPerDay=0,BPMeds=factor(0),prevalentStroke=factor(0),
prevalentHyp=factor(0),diabetes=factor(0),totChol=180,sysBP=115,
diaBP=100,BMI=body_mass,heartRate=60,glucose=80))
body_mass[body_mass-19] = predict(model, newdata = newdata_patient0_updates, type = "response")
print(body_mass)
body_mass
body_mass = 20
body_mass
newdata_patient0_updates = with(data, data.frame(male = factor(1),age = 55,education = "College",currentSmoker=factor(0),
cigsPerDay=0,BPMeds=factor(0),prevalentStroke=factor(0),
prevalentHyp=factor(0),diabetes=factor(0),totChol=180,sysBP=115,
diaBP=100,BMI=body_mass,heartRate=60,glucose=80))
body_mass
# Set your additional factor variables.
body_mass_arr[body_mass-19] = predict(model, newdata = newdata_patient0_updates, type = "response")
body_mass = body_mass+1
body_mass
body_mass_arr = array(1:11)
body_mass = 20
while(body_mass < 30) {
newdata_patient0_updates = with(data, data.frame(male = factor(1),age = 55,education = "College",currentSmoker=factor(0),
cigsPerDay=0,BPMeds=factor(0),prevalentStroke=factor(0),
prevalentHyp=factor(0),diabetes=factor(0),totChol=180,sysBP=115,
diaBP=100,BMI=body_mass,heartRate=60,glucose=80))
# Set your additional factor variables.
body_mass_arr[body_mass-19] = predict(model, newdata = newdata_patient0_updates, type = "response")
body_mass = body_mass+1
body_mass
}
body_mass_arr
